-- demonstrate the monetary format utility
--

require "common"    -- to get printf

local m = require "monetary"


local type Test = {any}

local us_tests: {Test} = {
  --fmtstr   value,  answer 
  {"%n",       123,          "$123"       },
  {"%n",       123456,       "$123,456"       },
  {"%n",       1234567,      "$1,234,567"       },
  {"%n",       12345678,     "$12,345,678"       },
  {"%n",       -123,         "$-123"       },
  {"%n",       -123456,      "$-123,456"       },
  {"%n",       -1234567,     "$-1,234,567"       },
  {"%n",       -12345678,    "$-12,345,678"       },
  {"%n",       123.25,       "$123.25"       },
  {"%n",       123456.25,    "$123,456.25"       },
  {"%n",       1234567.25,   "$1,234,567.25"       },
  {"%n",       12345678.25,  "$12,345,678.25"       },
  {"%n",       -123.25,      "$-123.25"       },
  {"%n",       -123456.25,   "$-123,456.25"       },
  {"%n",       -1234567.25,  "$-1,234,567.25"       },
  {"%n",       -12345678.25, "$-12,345,678.25"       },
  {"%+n",       -123.25,     "$-123.25"       },
  {"%+n",       -123456.25,  "$-123,456.25"       },
  {"%+n",       -1234567.25, "$-1,234,567.25"       },
  {"%+n",       -12345678.25,"$-12,345,678.25"       },
  {"%(n",       -123.25,     "$(123.25)"       },
  {"%(n",       -123456.25,  "$(123,456.25)"       },
  {"%(n",       -1234567.25, "$(1,234,567.25)"       },
  {"%(n",       -12345678.25,"$(12,345,678.25)"       },
  {"%(n",       123.25,      "$ 123.25 "       },
  {"%(n",       123456.25,   "$ 123,456.25 "       },
  {"%(n",       1234567.25,  "$ 1,234,567.25 "       },
  {"%(n",       12345678.25, "$ 12,345,678.25 "       },
  {"%!n",        123,        "123"       },
  {"%+!n",      -123.25,     "-123.25"       },
  {"%!n",       1234567,     "1,234,567"       },
  {"%(!n",      -1234567.25, "(1,234,567.25)"       },
  {"%#6n",      123,         "$    123"       },
  {"%!#6n",     123,         "    123"       },
  {"%#6n",      123456,      "$123,456"       },
  {"%#6n",      1234567,     "$1,234,567"       },
  {"%#8n",      123456,      "$   123,456"       },
  {"%#8n",      1234567,     "$ 1,234,567"       },
  {"%(#8n",       123456,      "$   123,456 "       },
  {"%(#8n",      -123456,      "$  (123,456)"       },
  {"%n",       12345678,     "$12,345,678"       },

  {"%+#0.2n",    -123,       "$-123.00"       },
  {"%+#0.1n",    -123,       "$-123.0"       },
  {"%(#0.2n",    -123,       "$(123.00)"       },
  {"%(#0.1n",    -123,       "$(123.0)"       },

  {"%+#0.2n",    -123.25,     "$-123.25"       },
  {"%+#0.1n",    -123.25,     "$-123.3"       },
  {"%+#0.0n",    -123.25,     "$-123"       },

  {"%(#0.2n",    -123.25,     "$(123.25)"       },
  {"%(#0.1n",    -123.25,     "$(123.3)"       },
  {"%(#0.0n",    -123.25,     "$(123)"       },
  {"%(#0.0n",    -123.50001,  "$(124)"       },

  {"%(#0.2n",    -123.1,      "$(123.10)"       },

  {"%#4.2n",      123.1,      "$  123.10"       },

  {"%!-5n",      123,         "123  "       },
  {"%(!-10#6n",  1230,         "  1,230   "       },
  {"%(-10#6n",   1230,         "$  1,230  "       },
  {"%(!-#6n",   -123,         "   (123)"       },
  {"%(!-#6n",   -123456,      "(123,456)"       },
  {"%(!-11#6n", -123456,      "(123,456)  "       },
  {"%^(!-11#6n",-123456,      "(123456)   "       },
  {"%^(!-11#6n",-123456.25,   "(123456.25)"       },
  {"%^(!-14#6.3n",123456.25,  " 123456.250   "       },
  {"%^(!-14#6.3n",-234876.55, "(234876.550)  "       },
}
local euro_tests: {Test} = {
  --fmtstr   value,  answer 
  {"%n",       123,          "€123"       },
  {"%n",       123456,       "€123.456"       },
  {"%n",       1234567,      "€1.234.567"       },
  {"%n",       12345678,     "€12.345.678"       },
  {"%n",       -123,         "€-123"       },
  {"%n",       -123456,      "€-123.456"       },
  {"%n",       -1234567,     "€-1.234.567"       },
  {"%n",       -12345678,    "€-12.345.678"       },
  {"%n",       123.25,       "€123,25"       },
  {"%n",       123456.25,    "€123.456,25"       },
  {"%n",       1234567.25,   "€1.234.567,25"       },
  {"%n",       12345678.25,  "€12.345.678,25"       },
  {"%n",       -123.25,      "€-123,25"       },
  {"%n",       -123456.25,   "€-123.456,25"       },
  {"%n",       -1234567.25,  "€-1.234.567,25"       },
  {"%n",       -12345678.25, "€-12.345.678,25"       },
  {"%+n",       -123.25,     "€-123,25"       },
  {"%+n",       -123456.25,  "€-123.456,25"       },
  {"%+n",       -1234567.25, "€-1.234.567,25"       },
  {"%+n",       -12345678.25,"€-12.345.678,25"       },
  {"%(n",       -123.25,     "€(123,25)"       },
  {"%(n",       -123456.25,  "€(123.456,25)"       },
  {"%(n",       -1234567.25, "€(1.234.567,25)"       },
  {"%(n",       -12345678.25,"€(12.345.678,25)"       },
  {"%(n",       123.25,      "€ 123,25 "       },
  {"%(n",       123456.25,   "€ 123.456,25 "       },
  {"%(n",       1234567.25,  "€ 1.234.567,25 "       },
  {"%(n",       12345678.25, "€ 12.345.678,25 "       },
  {"%!n",        123,        "123"       },
  {"%+!n",      -123.25,     "-123,25"       },
  {"%!n",       1234567,     "1.234.567"       },
  {"%(!n",      -1234567.25, "(1.234.567,25)"       },
  {"%#6n",      123,         "€    123"       },
  {"%!#6n",     123,         "    123"       },
  {"%#6n",      123456,      "€123.456"       },
  {"%#6n",      1234567,     "€1.234.567"       },
  {"%#8n",      123456,      "€   123.456"       },
  {"%#8n",      1234567,     "€ 1.234.567"       },
  {"%(#8n",       123456,      "€   123.456 "       },
  {"%(#8n",      -123456,      "€  (123.456)"       },
  {"%n",       12345678,     "€12.345.678"       },

  {"%+#0.2n",    -123,       "€-123,00"       },
  {"%+#0.1n",    -123,       "€-123,0"       },
  {"%(#0.2n",    -123,       "€(123,00)"       },
  {"%(#0.1n",    -123,       "€(123,0)"       },

  {"%+#0.2n",    -123.25,     "€-123,25"       },
  {"%+#0.1n",    -123.25,     "€-123,3"       },
  {"%+#0.0n",    -123.25,     "€-123"       },

  {"%(#0.2n",    -123.25,     "€(123,25)"       },
  {"%(#0.1n",    -123.25,     "€(123,3)"       },
  {"%(#0.0n",    -123.25,     "€(123)"       },
  {"%(#0.0n",    -123.50001,  "€(124)"       },

  {"%(#0.2n",    -123.1,      "€(123,10)"       },

  {"%#4.2n",      123.1,      "€  123,10"       },

  {"%!-5n",      123,         "123  "       },
  {"%(!-10#6n",  1230,        "  1.230   "       },
  {"%(-10#6n",   1230,        "€  1.230  "       },
  {"%(!-#6n",   -123,         "   (123)"       },
  {"%(!-#6n",   -123456,      "(123.456)"       },
  {"%(!-11#6n", -123456,      "(123.456)  "       },
  {"%^(!-11#6n",-123456,      "(123456)   "       },
  {"%^(!-11#6n",-123456.25,   "(123456,25)"       },
  {"%^(!-14#6.3n",123456.25,  " 123456,250   "       },
  {"%^(!-14#6.3n",-234876.55, "(234876,550)  "       },
}

printf("US Tests\n")
printf("     num:  %12s %18s   %s   %18s\n", "format", "expected", "status", "got")
for i = 1, #us_tests do
  local v   = us_tests[i]
  local f   = v[1] as string
  local val = v[2] as number
  local ans = v[3] as string

  local res = m.strfmon(f,val)

  local str = ""
  if res == ans then str = "pass"
  else               str = "FAILED" end

  local expected = sprintf("_%s_", ans)
  local got      = sprintf("_%s_", res)
  printf("test %3d: %12s  %20s  %6s  %20s\n", i, f, expected, str, got)
end


printf("\n\n\n")
printf("Euro Tests\n")
m.localize(".",",","€")
printf("     num:  %12s %18s   %s   %18s\n", "format", "expected", "status", "got")
for i = 1, #euro_tests do
  local v   = euro_tests[i]
  local f   = v[1] as string
  local val = v[2] as number
  local ans = v[3] as string

  local res = m.strfmon(f,val)

  local str = ""
  if res == ans then str = "pass"
  else               str = "FAILED" end

  local expected = sprintf("_%s_", ans)
  local got      = sprintf("_%s_", res)
  printf("test %3d: %12s  %20s  %6s  %20s\n", i, f, expected, str, got)
end

